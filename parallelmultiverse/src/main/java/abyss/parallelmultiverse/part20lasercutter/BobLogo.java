package abyss.parallelmultiverse.part20lasercutter;

import java.util.Vector;

public class BobLogo {
	private Vector<int[][]> vecData;
	private int indexLane;
	private int numberLane;
	private int[][] laneCurrent;
	private LaserPos laserPos=new LaserPos();;
	
	public BobLogo() {
		vecData=new Vector<int[][]>();
		vecData.add(new int[][]{{-50,13},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{1,-1},{0,-1},{0,-1},{0,-1},{1,-1},{1,-1},{1,-1},{1,-1},{1,-1},{1,0},{1,0},{1,0},{1,0},{1,0},{1,1},{1,1},{1,1},{1,1},{1,1},{0,1},{0,1},{0,1},{1,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1},{1,1},{0,1},{0,1},{0,1},{0,1},{0,1},{0,1}});
		vecData.add(new int[][]{{-34,1},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}});

		vecData.add(new int[][]{{-23,-15},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,1},{1,1},{1,1},{1,1},{0,1},{0,1},{1,1},{0,1},{0,1},{-1,1},{0,1},{0,1},{-1,1},{-1,1},{1,1},{1,1},{0,1},{0,1},{1,1},{0,1},{0,1},{0,1},{0,1},{0,1},{-1,1},{0,1},{0,1},{-1,1},{-1,1},{-1,1},{-1,1},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{1,-1}});
		vecData.add(new int[][]{{-17,-1},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0}});

		vecData.add(new int[][]{{8,-5},{0,1},{0,1},{0,1},{0,1},{-1,1},{0,1},{-1,1},{-1,1},{-1,1},{-1,0},{-1,0},{-1,0},{-1,0},{-1,-1},{-1,-1},{-1,-1},{0,-1},{-1,-1},{-1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1}});
		vecData.add(new int[][]{{-4,18},{1,1},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,0},{1,-1},{1,-1},{1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{-1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1}});
		vecData.add(new int[][]{{18,10},{0,1},{0,1},{0,1},{0,1},{1,1},{1,0},{1,1},{1,0},{1,0},{1,0},{1,0},{1,-1},{1,0},{1,-1},{1,-1},{1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{-1,-1},{-1,-1},{-1,-1},{-1,0},{-1,-1},{-1,0},{-1,-1},{-1,0},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{1,-1},{1,-1},{1,-1},{1,-1},{1,0},{1,0},{1,0},{1,0},{1,0},{1,1},{1,1},{1,1}});
		vecData.add(new int[][]{{37,8},{0,1},{0,1},{0,1},{1,1},{1,0},{1,1},{1,0},{1,0},{1,0},{1,0},{1,-1},{1,0},{1,-1},{1,-1},{1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{-1,-1},{-1,-1},{-1,-1},{-1,0},{-1,-1},{-1,0},{-1,-1},{-1,0},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{0,-1},{0,-1},{0,-1},{0,-1},{1,-1},{1,-1},{1,-1},{1,-1},{1,0},{1,0},{1,0},{1,0},{1,0},{1,1},{1,1},{1,1}});
		
		laneCurrent=vecData.get(numberLane);
	}
	
	public LaserPos getNextLaserPos() {
		if(laneCurrent==null) {
			return null;
		}
		if(indexLane==0) {
			laserPos.power=laserPos.x==laneCurrent[indexLane][0] && laserPos.y==laneCurrent[indexLane][1];
			if(!laserPos.power) {
				if(laserPos.x<laneCurrent[indexLane][0]) {
					laserPos.x++;
				}else if(laserPos.x>laneCurrent[indexLane][0]) {
					laserPos.x--;
				}
				if(laserPos.y<laneCurrent[indexLane][1]) {
					laserPos.y++;
				}else if(laserPos.y>laneCurrent[indexLane][1]) {
					laserPos.y--;
				}
				return laserPos;
			}
			laserPos.x=laneCurrent[indexLane][0];
			laserPos.y=laneCurrent[indexLane][1];
		}else {
			laserPos.x+=laneCurrent[indexLane][0];
			laserPos.y+=laneCurrent[indexLane][1];
		}
		if(++indexLane==laneCurrent.length) {
			indexLane=0;
			numberLane++;
			if(numberLane<vecData.size()) {
				laneCurrent=vecData.get(numberLane);
			}else {
				laneCurrent=null;
			}
		}
		return laserPos;
	}
	
}
