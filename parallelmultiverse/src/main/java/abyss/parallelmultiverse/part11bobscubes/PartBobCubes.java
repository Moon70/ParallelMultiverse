package abyss.parallelmultiverse.part11bobscubes;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Bob;
import abyss.lunarengine.gfx.BobFactory;
import abyss.lunarengine.gfx.LordFader;
import abyss.lunarengine.gfx.Point3D;
import abyss.lunarengine.sinatra.Sinatra;
import abyss.parallelmultiverse.common.BobTheBuilder;
import abyss.parallelmultiverse.common.Bobs3D;
import abyss.parallelmultiverse.common.BobsSpread;
import abyss.parallelmultiverse.part09bounce.PartBounce;

public class PartBobCubes extends APart{
	public static final int BACKGROUNDCOLOR = 0x050105;
	private Bob[] bobs1;
	private Bob[] bobs2;
	private Bobs3D bobs3d1;
	private Bobs3D bobs3d2;
	private BobsSpread bobBounce;

	private int[] cut1;
	private volatile int[] cut1Last;
	private int[] cut1Swap;
	private int[] cut2;
	private volatile int[] cut2Last;
	private int[] cut2Swap;
	private Sinatra sinatra;
	private boolean endOfSinus;
	public boolean fadeOut;
	private int moveSleep;
	private LordFader faderBackground;
	
	private int xDelta1;
	private int xDelta2;

	public static void main(String[] args){
		try{
			LunarEngine.initializeEngine();
			APart partBobCubes=new PartBobCubes();
			partBobCubes.precalc();
			partBobCubes.initialize();
			LunarEngine.setActivePart(partBobCubes);
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}

	@Override
	public void precalc(){
		faderBackground=new LordFader(PartBounce.BACKGROUNDCOLOR,BACKGROUNDCOLOR,120);
		sinatra=Sinatra.getInstance(new double[]{300.0,1.0,900.0,0.3,0.0,90.0});//generated by LunarTools Sinus Editor 1.0
		sinatra.playmode=Sinatra.PLAYMODE_ONCE;
		
		bobs1=new Bob[6];
		bobs2=new Bob[6];
		for(int i=0;i<bobs1.length;i++) {
			bobs1[i]=BobFactory.createBob(PartBobCubes.class, "/data/ball08/");
			bobs1[i].enabled=true;
			bobs1[i].animdelay=0;
			bobs2[i]=BobFactory.createBob(PartBobCubes.class, "/data/ball08/");
			bobs2[i].enabled=true;
			bobs2[i].animdelay=0;
			switch(i) {
			case 0:
				BobTheBuilder.reColorFade(bobs1[i],0xCf7f0f);
				BobTheBuilder.reColorFade(bobs2[i],0xCf7f0f);
				break;
			case 1:
				BobTheBuilder.reColorFade(bobs1[i],0x8fAf5f);
				BobTheBuilder.reColorFade(bobs2[i],0x8fAf5f);
				break;
			case 2:
				BobTheBuilder.reColorFade(bobs1[i],0x6f6f7f);
				BobTheBuilder.reColorFade(bobs2[i],0x6f6f7f);
				break;
			case 3:
				BobTheBuilder.reColorFade(bobs1[i],0x8f4f0f);
				BobTheBuilder.reColorFade(bobs2[i],0x8f4f0f);
				break;
			case 4:
				BobTheBuilder.reColorFade(bobs1[i],0xDfCf8f);
				BobTheBuilder.reColorFade(bobs2[i],0xDfCf8f);
				break;
			case 5:
				BobTheBuilder.reColorFade(bobs1[i],0x5f2f4f);
				BobTheBuilder.reColorFade(bobs2[i],0x5f2f4f);
				break;
			}
		}
		
		cut1=new int[Screen.screenSizeY>>3];
		cut1Last=new int[Screen.screenSizeY>>3];
		
		cut2=new int[Screen.screenSizeY>>3];
		cut2Last=new int[Screen.screenSizeY>>3];

		bobs3d1=BobTheBuilder.createCubes(8,50);
		bobs3d2=BobTheBuilder.createCubes(8,50);
	}
	
	@Override
	public void initialize() {
		moveSleep=3;
		for(int i=0;i<cut1.length;i++) {
			cut1[i]=500;
			cut1Last[i]=500;
		}
		for(int i=0;i<cut2.length;i++) {
			cut2[i]=1500;
			cut2Last[i]=1500;
		}
		xDelta1=-450;
		xDelta2=+450+780;
		sinatra.setIndex(0);
		endOfSinus=false;
		
		bobs3d1.turnAlpha=1;
		bobs3d1.turnBeta=0.5;
		bobs3d1.turnGamma=0.3;
		bobs3d1.focus1=900;
		bobs3d1.focus2=900;
		
		bobs3d2.turnAlpha=0.3;
		bobs3d2.turnBeta=0.8;
		bobs3d2.turnGamma=0.5;
		bobs3d2.focus1=bobs3d1.focus1;
		bobs3d2.focus2=bobs3d1.focus2;
		bobs3d2.alpha=45;
		bobs3d2.beta=45;
		bobs3d2.gamma=45;
		
		bobBounce=new BobsSpread();
		
		fadeOut=false;
	}
	
	@Override
	public void vbi(){
		bobBounce.vbi();
		bobs3d1.rotateVBI();
		bobs3d2.rotateVBI();

		if(fadeOut) {
			if(bobs3d1.focus1>0) {
				bobs3d1.focus1-=7;
			}
			if(bobs3d2.focus1>0) {
				bobs3d2.focus1-=7;
			}
		}
		int i;
		int x;
		int y;
		for(i=0;i<bobs3d2.arrayIndex;i++) {
			if(bobs3d2.points[i].enabled) {
				y=(bobs3d2.points[i].dy+Screen.screenCenterY)>>3;
				x=bobs3d2.points[i].dx+xDelta2;
				if(x < cut1Last[y]) {
					bobs3d2.points[i].enabled=false;
					bobs3d2.points[i].dx=x;
					bobBounce.addBob(bobs3d2.points[i]);
				}
			}
		}
		for(i=0;i<bobs3d1.arrayIndex;i++) {
			if(bobs3d1.points[i].enabled) {
				y=(bobs3d1.points[i].dy+Screen.screenCenterY)>>3;
				x=bobs3d1.points[i].dx+xDelta1;
				if(x > cut2Last[y]) {
					bobs3d1.points[i].enabled=false;
					bobs3d1.points[i].dx=x;
					bobBounce.addBob(bobs3d1.points[i]);
				}
			}
		}

		if(!endOfSinus) {
			i=sinatra.getNextValue(1);
			endOfSinus=i==900;
			xDelta1=-300-900+i;
			xDelta2=300+900-i;
		}else {
			if(--moveSleep==0 && xDelta2>200) {
				moveSleep=6;
				xDelta1++;
				xDelta2--;
			}
		}
		faderBackground.fade(1);
	}
	
	
	private Point3D worker1_point3D;
	@Override
	public void worker1(){
		cut1Swap=cut1Last;
		cut1Last=cut1;
		cut1=cut1Swap;
		
		bobs3d1.rotateCALC();
		Bob.screendataToWork=LunarEngine.screendataToWork2;
		
		for(int render1_i=0;render1_i<cut1.length;render1_i++) {
			cut1[render1_i]=500;
		}
		int bobIndex=0;
		int z;
		int xDeltaR=xDelta1+Screen.screenCenterX;
		for(int i=0;i<bobs3d1.arrayIndex;i++) {
			worker1_point3D=bobs3d1.points[i];
			if(worker1_point3D.enabled) {
				bobIndex=worker1_point3D.data;
				z=(725-250-worker1_point3D.dz)>>2;
				if(z>255) {
					bobs1[bobIndex].frame=255;
				}else if(z<0) {
					bobs1[bobIndex].frame=0;
				}else {
					bobs1[bobIndex].frame=z;
				}

				int x=worker1_point3D.dx+xDeltaR;
				int y=worker1_point3D.dy+Screen.screenCenterY;
				bobs1[bobIndex].render(x,y);
				y=y>>3;
				if(cut1[y]<x) {
					cut1[y]=x;
				}
			}
		}
		for(int i=0;i<cut1.length;i++) {
			cut1[i]-=Screen.screenCenterX;
		}
		bobBounce.render(bobs1);
	}

	private Point3D worker2_point3D;
	@Override
	public void worker3(){
		cut2Swap=cut2Last;
		cut2Last=cut2;
		cut2=cut2Swap;

		bobs3d2.rotateCALC();
		Bob.screendataToWork=LunarEngine.screendataToWork2;

		for(int i=0;i<cut2.length;i++) {
			cut2[i]=1500;
		}
		int bobIndex=0;
		int z;
		int xDeltaR=xDelta2+Screen.screenCenterX;
		for(int i=0;i<bobs3d2.arrayIndex;i++) {
			worker2_point3D=bobs3d2.points[i];
			if(worker2_point3D.enabled) {
				bobIndex=worker2_point3D.data;
				z=(725-250-worker2_point3D.dz)>>2;
				if(z>255) {
					bobs2[bobIndex].frame=255;
				}else if(z<0) {
					bobs2[bobIndex].frame=0;
				}else {
					bobs2[bobIndex].frame=z;
				}

				int x=worker2_point3D.dx+xDeltaR;
				int y=worker2_point3D.dy+Screen.screenCenterY;
				bobs2[bobIndex].render(x,y);
				y=y>>3;
				if(cut2[y]>x) {
					cut2[y]=x;
				}
			}
		}
		for(int i=0;i<cut2.length;i++) {
			cut2[i]-=Screen.screenCenterX;
		}
		bobBounce.render(bobs2);
		Screen.screenClear(LunarEngine.screendataToReset,faderBackground.getCurrentColor());
	}

	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}

}
