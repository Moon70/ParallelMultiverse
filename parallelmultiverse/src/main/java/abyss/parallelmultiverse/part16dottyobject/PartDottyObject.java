package abyss.parallelmultiverse.part16dottyobject;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Bob;
import abyss.lunarengine.gfx.LordFader;
import abyss.lunarengine.gfx.PolarBear;
import abyss.lunarengine.gfx.Tools2D;
import abyss.lunarengine.sinatra.Sinatra;

public class PartDottyObject extends APart{
	public int renderBuffer;
	public boolean fadeOut;
	private volatile int xOffset;
	public int xDestination=xOffset;

	private Tools2D tools2D;
	private Lineobject3DDottyLine lineobject3D=new Lineobject3DDottyLine();

	private Lineobject3D lineobject3DRing=new Lineobject3D();

	private int angleStep=15;
	private int pointsPerCircle=360/angleStep;
	private int circles=21;

	private int circlesRing=3;
	private int ringPosZ;
	
	private Sinatra sinatra;

	private int lastValue;

	public static void main(String[] args){
		try{
			LunarEngine.initializeEngine();
			PartDottyObject partLightningObjects=new PartDottyObject();
			partLightningObjects.precalc();
			partLightningObjects.initialize();
			partLightningObjects.xDestination=Screen.screenCenterX;
			partLightningObjects.xOffset=Screen.screenCenterX;
			LunarEngine.setActivePart(partLightningObjects);
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}
	
	@Override
	public void precalc() {
		sinatra=Sinatra.getInstance(new double[]{360.0,1.0,800.0,1.0,90.0,450.0});//generated by LunarTools Sinus Editor 1.0
		tools2D=new Tools2D();
		
		addCircle(50,	-200,	lineobject3D);
		addCircle(50,	-170,	lineobject3D);
		addCircle(30,	-170,	lineobject3D);
		addCircle(30,	-120,	lineobject3D);
		addCircle(50,	-120,	lineobject3D);
		addCircle(50,	-90,	lineobject3D);
		addCircle(100,	-90,	lineobject3D);
		addCircle(100,	-60,	lineobject3D);
		addCircle(30,	-60,	lineobject3D);
		addCircle(30,	-10,	lineobject3D);
		addCircle(200,	-10,	lineobject3D);
		addCircle(200,	20,		lineobject3D);
		addCircle(70,	20,		lineobject3D);
		addCircle(70,	50,		lineobject3D);
		addCircle(200,	100,	lineobject3D);
		addCircle(200,	120,	lineobject3D);
		addCircle(30,	140,	lineobject3D);
		addCircle(30,	170,	lineobject3D);
		addCircle(150,	190,	lineobject3D);
		addCircle(30,	200,	lineobject3D);
		addCircle(30,	230,	lineobject3D);
		
		ringPosZ=-230*3;
		addCircle(280,	-250,	lineobject3DRing);
		addCircle(300,	-230,	lineobject3DRing);
		addCircle(280,	-210,	lineobject3DRing);
		
		int[] colors=new int[] {
				0xB7700D,
				0xCf7f0f,
				0xB7700D,
				
				0x84A258,
				0x8fAf5f,
				0x84A258,

				0x656574,
				0x6f6f7f,
				0x656574,

				0x6C3C0B,
				0x8f4f0f,
				0x6C3C0B,

				0xC8BA80,
				0xDfCf8f,
				0xC8BA80,
				};
		
		LordFader fader;
		int numberOfColors=colors.length;
		int[][] fadedeColors=new int[numberOfColors][256];
		for(int i=0;i<numberOfColors;i++) {
			int color=colors[i];
			fader=new LordFader(0x000000,color,128+30);
			for(int j=0;j<128;j++) {
				fadedeColors[i][j]=fader.colors[j+30];
			}
			fader=new LordFader(color,0xffffff,240);
			for(int j=0;j<128;j++) {
				fadedeColors[i][j+128]=fader.colors[j];
			}
		}
		
		int colorRing=0x9BACC3;
		int[] fadedColorsRing=new int[256];	
		fader=new LordFader(0x000000,colorRing,128+30);
		for(int j=0;j<128;j++) {
			fadedColorsRing[j]=fader.colors[j+30];
		}
		fader=new LordFader(colorRing,0xffffff,240);
		for(int j=0;j<128;j++) {
			fadedColorsRing[j+128]=fader.colors[j];
		}
		
		int[] fadedColorsRing2=new int[256];
		colorRing=0x99ffff;
		fader=new LordFader(0x000000,colorRing,128+30);
		for(int j=0;j<128;j++) {
			fadedColorsRing2[j]=fader.colors[j+30];
		}
		fader=new LordFader(colorRing,0xffffff,240);
		for(int j=0;j<128;j++) {
			fadedColorsRing2[j+128]=fader.colors[j];
		}
		
		int colorIndex=0;
		int i;
		int index=0;
		for(int j=0;j<circles;j++) {
			for(i=index;i<index+pointsPerCircle-1;i++) {
				lineobject3D.addLine(new Line(i,i+1,fadedeColors[colorIndex]));
			}
			lineobject3D.addLine(new Line(i,index,fadedeColors[colorIndex]));
			index+=pointsPerCircle;
			colorIndex++;
			colorIndex=colorIndex%numberOfColors;
		}
		index=0;
		for(int j=0;j<circlesRing;j++) {
			for(i=index;i<index+pointsPerCircle-1;i++) {
				lineobject3DRing.addLine(new Line(i,i+1,fadedColorsRing));
			}
			lineobject3DRing.addLine(new Line(i,index,fadedColorsRing));
			index+=pointsPerCircle;
		}

		colorIndex=0;
		index=0;
		for(int j=0;j<circles-1;j++) {
			for(i=index;i<index+pointsPerCircle;i++) {
				lineobject3D.addLine(new Line(i,i+pointsPerCircle,fadedeColors[colorIndex]));
			}
			index+=pointsPerCircle;
			colorIndex++;
			colorIndex=colorIndex%numberOfColors;
		}
		index=0;
		for(int j=0;j<circlesRing-1;j++) {
			for(i=index;i<index+pointsPerCircle;i++) {
				lineobject3DRing.addLine(new Line(i,i+pointsPerCircle,fadedColorsRing));
			}
			if(j==1) {
				int radius=300+150;
				int alpha=0;
				for(i=index;i<index+pointsPerCircle;i++) {
					LinePoint3D point=lineobject3DRing.getPoint(i);
					int x=PolarBear.calcXint(radius-100, alpha);
					int y=PolarBear.calcYint(radius-100, alpha);
					int indexPoint=lineobject3DRing.addPoint(new LinePoint3D(x,	y,point.sz));
					lineobject3DRing.addLine(new Line(i,indexPoint,fadedColorsRing2));
					alpha+=360/pointsPerCircle;
				}
			}
			index+=pointsPerCircle;
		}
		
		lineobject3D.createArrays();
		lineobject3D.turnAlpha=0.4;
		lineobject3D.turnBeta=0.3;
		lineobject3D.turnGamma=0.3;
		lineobject3D.beta=90;
		lineobject3D.focus1=800;
		lineobject3D.focus2=1000;
		
		lineobject3DRing.createArrays();
		lineobject3DRing.turnAlpha=lineobject3D.turnAlpha;
		lineobject3DRing.turnBeta=lineobject3D.turnBeta;
		lineobject3DRing.turnGamma=lineobject3D.turnGamma;
		lineobject3DRing.beta=lineobject3D.beta;
		lineobject3DRing.focus1=lineobject3D.focus1;
		lineobject3DRing.focus2=lineobject3D.focus2;
	}

	private void addCircle(double radius, int z,Lineobject3D lineobject3D) {
		z=z*3;
		radius=radius*1.5;
		for(double a=0;a<360;a+=angleStep) {
			int x=(int)(radius*Math.cos(a*PolarBear.DEG2RAD));
			int y=(int)(radius*Math.sin(a*PolarBear.DEG2RAD));
			lineobject3D.addPoint(new LinePoint3D(x,	y,	z));
		}
	}
	
	@Override
	public void initialize() {
		xOffset=Screen.screenSizeX+750;
		tools2D.lightningLineParts=10;
		renderBuffer=3;
		sinatra.setIndex(180);
		lastValue=sinatra.getNextValue(0);
	}
	
	@Override
	public void vbi(){
		lineobject3D.rotateVBI();
		lineobject3DRing.rotateVBI();

		ringPosZ=sinatra.getNextValue(1);
		for(int i=0;i<lineobject3DRing.points.length;i++) {
			lineobject3DRing.points[i].sz+=(ringPosZ-lastValue)<< Bob.SHIFT;
		}
		lastValue=ringPosZ;
		
		if(xOffset>xDestination) {
			xOffset-=5;
		}
		
		if(fadeOut && lineobject3D.focus1>10) {
			lineobject3D.focus1-=8;
			lineobject3DRing.focus1-=8;
		}
		
	}
	
	@Override
	public void worker3(){
		switch(renderBuffer) {
		case 0:
			return;
		case 2:
			tools2D.screendataWorking=LunarEngine.screendataToWork2;
			break;
		case 3:
			tools2D.screendataWorking=LunarEngine.screendataToWork3;
			break;
		}
		lineobject3D.rotateCALC();
		lineobject3D.render(tools2D,xOffset,ringPosZ);
		lineobject3DRing.rotateCALC();
		tools2D.lightningLineParts=15;
		tools2D.rnd=20;
		lineobject3DRing.render(tools2D,xOffset);
	}
	
	@Override
	public void worker2(){
		Screen.screenClear(LunarEngine.screendataToReset,0x000000);
	}
	
	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}

}
