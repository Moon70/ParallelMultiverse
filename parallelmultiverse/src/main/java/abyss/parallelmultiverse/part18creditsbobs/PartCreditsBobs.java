package abyss.parallelmultiverse.part18creditsbobs;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Bob;
import abyss.lunarengine.gfx.BobFactory;
import abyss.lunarengine.gfx.LordFader;
import abyss.lunarengine.gfx.Tools2D;
import abyss.lunarengine.sinatra.Sinatra;
import abyss.parallelmultiverse.common.BobTheBuilder;
import abyss.parallelmultiverse.common.Bobs3D;
import abyss.parallelmultiverse.common.BobsBounce;
import abyss.parallelmultiverse.common.PointBounce;

public class PartCreditsBobs extends APart{
	public boolean fadeOutLaser;
	public boolean fadeOutColors;

	private Bob[] bobs;
	private Bobs3D bobs3d;
	private Tools2D tools2d;
	private BobsBounce bobBounce;
	
	private static final int BOBSIZE=16;
	private volatile int destOffsetX;
	private volatile int border;
	private Sinatra sinatraFadein;
	private LordFader fader;
	public int fadeDirection=1;

	public static void main(String[] args){
		try{
			LunarEngine.initializeEngine();
			APart partCreditsBobs=new PartCreditsBobs();
			partCreditsBobs.precalc();
			partCreditsBobs.initialize();
			LunarEngine.setActivePart(partCreditsBobs);
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}

	@Override
	public void precalc(){
		tools2d=new Tools2D();
		PointBounce.bobSize=BOBSIZE;
		sinatraFadein=Sinatra.getInstance(new double[]{300.0,1.0,1200.0,0.3,0.0,90.0});//generated by LunarTools Sinus Editor 1.0
		sinatraFadein.playmode=Sinatra.PLAYMODE_ONCE;

		fader=new LordFader(0,0x00ffcc,240);
		
		bobs=new Bob[6];
		for(int i=0;i<bobs.length;i++) {
			bobs[i]=BobFactory.createBob(PartCreditsBobs.class, "/data/ball16/");
			bobs[i].enabled=true;
			bobs[i].animdelay=0;
			switch(i) {
			case 0:
				BobTheBuilder.reColorFade(bobs[i],0xCf7f0f);
				break;
			case 1:
				BobTheBuilder.reColorFade(bobs[i],0x8fAf5f);
				break;
			case 2:
				BobTheBuilder.reColorFade(bobs[i],0x6f6f7f);
				break;
			case 3:
				BobTheBuilder.reColorFade(bobs[i],0x8f4f0f);
				break;
			case 4:
				BobTheBuilder.reColorFade(bobs[i],0xDfCf8f);
				break;
			case 5:
				BobTheBuilder.reColorFade(bobs[i],0x5f2f4f);
				break;
			}
		}
	}
	
	@Override
	public void initialize() {
		fadeOutLaser=false;
		fadeOutColors=false;
		destOffsetX=-210-Screen.screenCenterX;
		border=Screen.screenCenterX;
		tools2d.lightningLineParts=50;
		tools2d.rnd=20;
		fader.setIndex(0);
		bobBounce=new BobsBounce();
		bobs3d=BobTheBuilder.createObject2(BOBSIZE,30);
		bobs3d.turnAlpha=0.9;
		bobs3d.turnBeta=0.8;
		bobs3d.turnGamma=0.7;
	}
	
	@Override
	public void vbi(){
		bobs3d.rotateVBI();
		bobBounce.vbi();
		destOffsetX=-1550+sinatraFadein.getNextValue(1);
		fader.fade(fadeDirection);
		if(fadeOutLaser && border>-50) {
			border-=4;
		}
		if(fadeOutColors && bobBounce.frame<254) {
			bobBounce.frame+=2;
		}
	}

	@Override
	public void worker1(){
		Bob.screendataToWork=LunarEngine.screendataToWork;
		tools2d.screendataWorking=LunarEngine.screendataToWork;
		bobs3d.rotateCALC();
		
		int z;
		int bobIndex;
		int offsetX=Screen.screenCenterX+32+destOffsetX;
		for(int i=0;i<bobs3d.arrayIndex;i++) {
			if(bobs3d.points[i].enabled) {
				if(bobs3d.points[i].dx+offsetX > border) {
					bobs3d.points[i].enabled=false;
					bobs3d.points[i].dx+=destOffsetX;
					bobBounce.addBob(bobs3d.points[i]);
				}

				bobIndex=bobs3d.points[i].data;

				z=(725-250-bobs3d.points[i].dz)>>2;
				if(z>255) {
					bobs[bobIndex].frame=255;
				}else if(z<0) {
					bobs[bobIndex].frame=0;
				}else {
					bobs[bobIndex].frame=z;
				}

				bobs[bobIndex].render(
						bobs3d.points[i].dx+Screen.screenCenterX+destOffsetX,
						bobs3d.points[i].dy+Screen.screenCenterY
						);
			}
		}
		bobBounce.render(bobs);
		
		tools2d.pixel=fader.getCurrentColor();
		tools2d.lightningLine(border, 0, border, Screen.screenSizeY);
	}

	@Override
	public void worker2(){
		Screen.screenClear(LunarEngine.screendataToReset,0);
	}
	
	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}

}
