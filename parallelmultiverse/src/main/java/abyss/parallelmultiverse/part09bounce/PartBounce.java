package abyss.parallelmultiverse.part09bounce;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.Vector;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.LunarEngineTools;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Bob;
import abyss.lunarengine.gfx.BobFactory;
import abyss.lunarengine.gfx.LordFader;
import abyss.lunarengine.gfx.Object2D;
import abyss.lunarengine.gfx.Tools2D;
import abyss.lunarengine.sinatra.Sinatra;
import abyss.lunarengine.tools.Random;
import abyss.parallelmultiverse.common.Quad2;
import abyss.parallelmultiverse.part07turnbars.PartTurnbars;

public class PartBounce extends APart{
	public static final int BACKGROUNDCOLOR = 0x040701;
	public boolean eyeZoomIn;
	public boolean eyeZoomOut;
	public boolean ballDown1;
	public boolean ballDown2;
	public boolean ballUp;
	public boolean lightnig;
	public boolean eyeUp;
	public boolean bounceOut1;
	public boolean bounceOut2;
	public boolean bounceOut3;
	public int sinusIndex;
	
	private Bob bobBall;
	private int imageX;
	private int imageY;
	private int pointsX;
	private int pointsY;
	public static LordFader faderBackground;

	private Tools2D tools2D;
	
	private BufferedImage bufferedImage;
	private int[] screendataEyeball;
	
	private Vector<Quad2> vecQuads;
	private Quad2 quad2;
	
	private Object2D object2D;
	
	private Sinatra sinatra;
	
	private int[][] sinus1;
	private Sinatra sinatraBallDown1;
	private Sinatra sinatraBallDown2;
	private Sinatra sinatraBallDown3;

 	public static void main(String[] args){
		try{
			LunarEngine.initializeEngine();
			APart partBounce=new PartBounce();
			partBounce.precalc();
			partBounce.initialize();
			LunarEngine.setActivePart(partBounce);
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}

	@Override
	public void precalc(){
		faderBackground=new LordFader(PartTurnbars.BACKGROUNDCOLOR,BACKGROUNDCOLOR,120);
		bobBall=BobFactory.createBob(PartBounce.class, "/data/BounceBall/");
		Image image=LunarEngineTools.createImage(jFrame,"data/Eyeball.png");
		imageX=image.getWidth(null);
		imageY=image.getHeight(null);
		bufferedImage=new BufferedImage(imageX,imageY,BufferedImage.TYPE_INT_RGB);
		screendataEyeball=((DataBufferInt)bufferedImage.getRaster().getDataBuffer()).getData();
		bufferedImage.getGraphics().drawImage(image,0,0,jFrame);
		image=null;
		bufferedImage=null;
		
		sinatraBallDown1=Sinatra.getInstance(new double[]{36.0,1.0,550.0,2.5,270.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinatraBallDown2=Sinatra.getInstance(new double[]{36.0,1.0,650.0,2.5,270.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinatraBallDown3=Sinatra.getInstance(new double[]{36.0,1.0,750.0,2.5,180.0,270.0});//generated by LunarTools Sinus Editor 1.0
		
		int numberOfSinusFirstFrames=180;
		int numberOfSinusSecondFrames=10;
		int numberOfSinusThirdFrames=10;
		int numberOfSinusFourthFrames=10;
		int numberOfSinusFifthFrames=10;
		int numberOfSinusSixthFrames=10;

		double radius1=200;
		double radius2=radius1*2/3;
		double radius3=radius2*2/3;
		double radius4=radius3*2/3;
		double radius5=radius4*1/2;

		int numberOfSinusAllFrames=numberOfSinusFirstFrames+numberOfSinusSecondFrames+numberOfSinusThirdFrames*2+numberOfSinusFourthFrames*2+numberOfSinusFifthFrames*2+numberOfSinusSixthFrames*2;

		sinus1=new int[numberOfSinusAllFrames][71];
		int frameIndex=0;
		for(int i=0;i<numberOfSinusFirstFrames;i++) {
			double r=radius1*i/numberOfSinusFirstFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=numberOfSinusSecondFrames-1;i>=0;i--) {
			double r=radius1*i/numberOfSinusSecondFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=0;i<numberOfSinusThirdFrames;i++) {
			double r=radius2*i/numberOfSinusThirdFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,-r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=numberOfSinusThirdFrames-1;i>=0;i--) {
			double r=radius2*i/numberOfSinusThirdFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,-r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=0;i<numberOfSinusFourthFrames;i++) {
			double r=radius3*i/numberOfSinusFourthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=numberOfSinusFourthFrames-1;i>=0;i--) {
			double r=radius3*i/numberOfSinusFourthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		for(int i=0;i<numberOfSinusFifthFrames;i++) {
			double r=radius4*i/numberOfSinusFifthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,-r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}
		
		for(int i=numberOfSinusFifthFrames-1;i>=0;i--) {
			double r=radius4*i/numberOfSinusFifthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,-r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}
		

		for(int i=0;i<numberOfSinusSixthFrames;i++) {
			double r=radius5*i/numberOfSinusSixthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}
		
		for(int i=numberOfSinusSixthFrames-1;i>=0;i--) {
			double r=radius5*i/numberOfSinusSixthFrames;
			sinatra=Sinatra.getInstance(new double[]{71.0,1.0,r,2.53,180.0,360.0});//generated by LunarTools Sinus Editor 1.0
			for(int s=0;s<71;s++) {
				sinus1[frameIndex][s]=sinatra.getNextValue(1);
			}
			frameIndex++;
		}

		pointsX=imageX+1;
		pointsY=imageY+1;
		object2D=new Object2D();
		object2D.vo=new int[pointsX*pointsY][3];
		object2D.to=new int[pointsX*pointsY][3];

		
		final int size=8+4;
		for(int y=0;y<pointsY;y++) {
			for(int x=0;x<pointsX;x++) {
				object2D.vo[y*pointsX+x][0]=(x*size-imageX*size/2) << Bob.SHIFT;
				object2D.vo[y*pointsX+x][1]=50 << Bob.SHIFT;
				object2D.vo[y*pointsX+x][2]=(y*size-imageY*size/2) << Bob.SHIFT;
			}
		}
		
		vecQuads=new Vector<Quad2>();
		for(int y=0;y<imageY;y++) {
			for(int x=0;x<imageX;x++) {
				vecQuads.add(new Quad2(
						object2D.to[y*pointsX+x],
						object2D.to[y*pointsX+x+1],
						object2D.to[(y+1)*pointsX+x+1],
						object2D.to[(y+1)*pointsX+x],
						screendataEyeball[y*imageY+x]
						));
			}
		}
	}

	@Override
	public void initialize() {
		bobBall.setPos(Screen.screenCenterX-32,-64);
		bobBall.enabled=true;
		sinatraBallDown1.setIndex(0);
		sinatraBallDown2.setIndex(0);
		sinatraBallDown3.setIndex(0);
		tools2D=new Tools2D();
		tools2D.lightningLineParts=20;
		tools2D.rnd=20;
		Object2D.tools2D=tools2D;
		object2D.focus1=0;
		object2D.focus2=1000;
		object2D.turnBeta=1.5;

		sinusIndex=0;
		eyeZoomIn=true;
		eyeZoomOut=false;
		ballDown1=false;
		ballDown2=false;
		ballUp=false;
		lightnig=false;
		eyeUp=false;
		bounceOut1=false;
		bounceOut2=false;
		bounceOut3=false;
	}
	
	@Override
	public void vbi(){
		for(int y=0;y<pointsY;y++) {
			for(int x=0;x<pointsX;x++) {
				object2D.vo[y*pointsX+x][1]=250+(sinus1[sinusIndex][x]+sinus1[sinusIndex][y]) << Bob.SHIFT;
			}
		}
		object2D.rotateVBI();

		if(eyeZoomIn) {
			if(object2D.focus1==700) {
				ballDown1=true;
			}
			if(object2D.focus1<800) {
				object2D.focus1+=2;
			}else {
				eyeZoomIn=false;
			}
		}
		
		if(eyeZoomOut) {
			if(object2D.focus1==0) {
				eyeZoomOut=false;
			}else {
				object2D.focus1-=4;
			}
		}
		
		if(ballDown1) {
			if(bobBall.getPosY()<20) {
				bobBall.setPos(Screen.screenCenterX-32, bobBall.getPosY()+1);
			}else {
				ballDown1=false;
			}
		}
		
		if(ballDown2) {
			int bobSinusYValue=sinatraBallDown1.getNextValue(1);
			bobBall.setPos(Screen.screenCenterX-32, 20+550+bobSinusYValue);
			if(bobSinusYValue==-23) {
				ballDown2=false;
			}
		}

		if(ballUp) {
			if(bobBall.getPosY()>20) {
				bobBall.setPos(Screen.screenCenterX-32,bobBall.getPosY()-2);
			}else {
				ballUp=false;
			}
		}

		if(eyeUp) {
			if(sinusIndex<sinus1.length-1) {
				sinusIndex++;
				if(sinusIndex>180) {
					lightnig=false;
				}
			}else {
				sinusIndex=0;
				eyeUp=false;
			}
		}
		
		if(bounceOut1) {
			int bobSinusYValue=sinatraBallDown2.getNextValue(1);
			bobBall.setPos(Screen.screenCenterX-32, 20+650+bobSinusYValue);
			if(bobSinusYValue==-27) {
				bounceOut1=false;
				bounceOut2=true;
				bounceOut3=true;
			}
		}

		if(bounceOut2) {
			if(sinusIndex<sinus1.length-1) {
				sinusIndex++;
			}else {
				sinusIndex=0;
				bounceOut2=false;
			}
		}

		if(bounceOut3) {
			int bobSinusYValue=sinatraBallDown3.getNextValue(1);
			bobBall.setPos(Screen.screenCenterX-32-bobSinusYValue, 20+650+bobSinusYValue);
			if(bobSinusYValue==-748) {
				bounceOut3=false;
			}
		}

		faderBackground.fade(1);
	}

	@Override
	public void worker1(){
		object2D.rotateCALC();
		tools2D.screendataWorking=LunarEngine.screendataToWork2;
		Bob.screendataToWork=LunarEngine.screendataToWork2;
		Quad2.tools2D=tools2D;
		Quad2.steps=35;
		
		for(int i=0;i<vecQuads.size();i++) {
			quad2=vecQuads.get(i);
			if(quad2.p1[2]>=0) {
				quad2.drawFilled();
			}
		}
		for(int i=0;i<vecQuads.size();i++) {
			quad2=vecQuads.get(i);
			if(quad2.p1[2]<0) {
				quad2.drawFilled();
			}
		}

		if(lightnig) {
			tools2D.pixel=0xE0E0D0;
			int x=bobBall.getPosX()+32;
			int y=bobBall.getPosY()+32;
			tools2D.lightningLine(x, y, (int)(x+Random.random()*140-70), y+150+20);
			tools2D.lightningLine(x, y, (int)(x+Random.random()*140-70), y+150+20);
			tools2D.lightningLine(x, y, (int)(x+Random.random()*140-70), y+150+30);
			tools2D.lightningLine(x, y, (int)(x+Random.random()*140-70), y+150+30);
		}
		bobBall.render();
	}

	@Override
	public void worker3(){
		Screen.screenClear(LunarEngine.screendataToReset,faderBackground.getCurrentColor());
	}

	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}

}
