package abyss.parallelmultiverse.part12eyewave;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.Vector;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.LunarEngineTools;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Object2D;
import abyss.lunarengine.gfx.Tools2D;
import abyss.lunarengine.sinatra.Sinatra;
import abyss.parallelmultiverse.common.Quad2;

public class PartEyeWave extends APart{
	public int renderScreen;
	
	private static final int SHIFT=12;
	private Tools2D tools2D;

	private int eyeballX;
	private int eyeballY;
	private int pointsX;
	private int pointsY;

	private BufferedImage bufferedImage;
	private int[] eyeball;
	
	private Vector<Quad2> vecQuads;
	
	private Object2D object2D;
	
	private Sinatra sinatraX;
	private Sinatra sinatraY;
	
	public static void main(String[] args){
		try{
			LunarEngine.initializeEngine();
			APart partEyeWave=new PartEyeWave();
			partEyeWave.precalc();
			partEyeWave.initialize();
			LunarEngine.setActivePart(partEyeWave);
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}

	@Override
	public void precalc(){
		tools2D=new Tools2D();
		Image imageEyeball=LunarEngineTools.createImage(jFrame,"data/Eyeball.png");
		eyeballX=imageEyeball.getWidth(null);
		eyeballY=imageEyeball.getHeight(null);
		bufferedImage=new BufferedImage(eyeballX,eyeballY,BufferedImage.TYPE_INT_RGB);
		eyeball=((DataBufferInt)bufferedImage.getRaster().getDataBuffer()).getData();
		bufferedImage.getGraphics().drawImage(imageEyeball,0,0,jFrame);
		imageEyeball=null;
		bufferedImage=null;
		sinatraX=Sinatra.getInstance(new double[]{3600.0,3.0,40.0,0.5,0.0,360.0,15.0,1.2,0.0,360.0,20.0,2.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinatraY=Sinatra.getInstance(new double[]{1800.0,3.0,40.0,0.6,0.0,360.0,20.0,1.0,0.0,360.0,15.0,2.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0

		object2D=new Object2D();
		pointsX=eyeballX+1;
		pointsY=eyeballY+1;
		object2D.vo=new int[pointsX*pointsY][3];
		object2D.to=new int[pointsX*pointsY][3];
		object2D.alpha=185;
		object2D.beta=130;
		object2D.gamma=65;
		object2D.turnAlpha=0.08;
		object2D.turnGamma=-0.02;
		
		final int size=8;
		for(int y=0;y<pointsY;y++) {
			for(int x=0;x<pointsX;x++) {
				object2D.vo[y*pointsX+x][0]=(x*size-eyeballX*size/2) << SHIFT;
				object2D.vo[y*pointsX+x][2]=(y*size-eyeballY*size/2) << SHIFT;
			}
		}

		vecQuads=new Vector<Quad2>();
		for(int y=0;y<eyeballY;y++) {
			for(int x=0;x<eyeballX;x++) {
				vecQuads.add(new Quad2(
					object2D.to[y*pointsX+x],
					object2D.to[y*pointsX+x+1],
					object2D.to[(y+1)*pointsX+x+1],
					object2D.to[(y+1)*pointsX+x],
					eyeball[y*eyeballY+x]
					));
			}
		}
	}
	
	@Override
	public void initialize() {
		sinatraX.setIndex(0);
		sinatraY.setIndex(0);
		Object2D.tools2D=tools2D;
		object2D.focus1=50;
		object2D.focus2=900;
		renderScreen=2;
		Quad2.tools2D=tools2D;
		Quad2.steps=30;
	}
	
	@Override
	public void vbi(){
		if(object2D.focus1<1040) {
			object2D.focus1+=5;
		}
		sinatraX.getNextValue(3);
		sinatraY.getNextValue(4);
		int sinusY;
		for(int y=0;y<pointsY;y++) {
			sinusY=sinatraY.getNextDeltaValue(10);
			sinatraX.resetDeltaIndex();
			for(int x=0;x<pointsX;x++) {
				object2D.vo[y*pointsX+x][1]=-(sinatraX.getNextDeltaValue(8)+sinusY) << SHIFT;
			}
		}
		object2D.rotateVBI();
	}

	@Override
	public void worker1(){
		object2D.rotateCALC();
		if(renderScreen==1) {
			tools2D.screendataWorking=LunarEngine.screendataToWork;
		}else {
			tools2D.screendataWorking=LunarEngine.screendataToWork2;
		}
		for(int i=0;i<vecQuads.size();i++) {
			vecQuads.get(i).drawFilled();
		}
	}

	@Override
	public void worker3(){
		Screen.screenClear(LunarEngine.screendataToReset,0x000000);
	}

	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}
}
