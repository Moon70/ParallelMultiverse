package abyss.parallelmultiverse.part02abysslogo;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.Arrays;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.LunarEngineTools;
import abyss.lunarengine.Screen;
import abyss.lunarengine.gfx.Bob;
import abyss.lunarengine.gfx.BobFactory;
import abyss.lunarengine.gfx.LordFader;
import abyss.lunarengine.gfx.Point2D;
import abyss.lunarengine.gfx.Quad;
import abyss.lunarengine.sinatra.Sinatra;
import abyss.lunarengine.spliner.Spliner;

public class PartAbyssLogo extends APart{
	public static final int BACKGROUNDCOLOR = 0x000B16;
	public boolean enableSpliner;
	public int logoFadeSleep;
	public int logoFadeDirection;
	public boolean logoFadeout;
	public boolean enableBackgroundFader;
	public Quad quadLogo;

	private static final int SHIFT=12;
	private int logoFadePoint=0;
	private volatile int logoFadeDelta=-LOGOSHADECOUNT;
	private LordFader faderBackground;
	private Bob bobFade;
	private int[][] bobData;

	private BufferedImage bufferedImageAbysslogo;
	private int[] dataAbysslogo;
	private int[][] dataAbysslogoShaded;
	private int logoWidth;
	private int logoHeight;

	private static final int LOGOSHADECOUNT=24;

	private Sinatra sinatraX1;
	private Sinatra sinatraX2;
	private Sinatra sinatraY1;
	private Sinatra sinatraY2;

	private Spliner[] spliner;

	private int splineIndexOffset;
	private int renderLogoStepsX=1300;
	private int renderLogoStepsY=1300;
	private int renderLogoDeltaX;
	private int renderLogoDeltaY;

	private Point2D point2D;
	private int[] bobDataFrame;

	public static void main(String[] args){
		try{
			//	new SinatraController().openGUI();
			//	new SplineController().openGUI();

			LunarEngine.initializeEngine();
			PartAbyssLogo partAbyssLogo=new PartAbyssLogo();
			partAbyssLogo.precalc();
			partAbyssLogo.initialize();
			LunarEngine.setActivePart(partAbyssLogo);
			partAbyssLogo.enableSpliner=true;
			LunarEngine.startEngine();
		}catch(Throwable throwable){
			LunarEngine.throwableHandler(throwable);
		}
	}

	@Override
	public void precalc() {
		faderBackground=new LordFader(0x000000,BACKGROUNDCOLOR,210);
		bobFade=BobFactory.createBob(PartAbyssLogo.class, "/data/LogoFadeBob/");
		bobFade.enabled=true;
		bobFade.animdelay=0;
		bobData=bobFade.bobdata;

		sinatraX1=Sinatra.getInstance(new double[]{900.0,2.0,4.5,0.4,0.0,360.0,4.0,4.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinatraX2=Sinatra.getInstance(new double[]{720.0,2.0,4.0,0.5,0.0,360.0,4.5,4.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0

		sinatraY1=Sinatra.getInstance(new double[]{720.0,2.0,4.5,0.5,0.0,360.0,4.0,6.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinatraY2=Sinatra.getInstance(new double[]{1800.0,2.0,4.5,0.4,0.0,360.0,4.0,5.0,0.0,360.0});//generated by LunarTools Sinus Editor 1.0

		spliner=new Spliner[4];
		spliner[0]=Spliner.getInstance(new int[]{2,6,690,310,344,320,215,170,65,160,170,65,163,405,320,215,160,320,215,456,45,671,386,110,671,386,935,760,885,288,160,885,288,849,-52,413,197,110,413,197,-68,459,369,282});//generated by LunarTools Spline Editor 1.0
		spliner[1]=Spliner.getInstance(new int[]{2,6,690,1312,220,1349,247,1370,265,160,1370,265,1628,455,1120,315,160,1120,315,220,90,779,169,260,779,169,1934,358,1210,87,60,1210,87,883,-8,1646,148,60,1646,148,2044,229,1438,200});//generated by LunarTools Spline Editor 1.0
		spliner[2]=Spliner.getInstance(new int[]{2,6,690,1312,860,1158,761,912,796,240,912,796,522,849,1134,697,110,1134,697,1367,643,1352,301,160,1352,301,1329,-27,1070,524,110,1070,524,872,983,1723,970,80,1723,970,2011,965,1252,749});//generated by LunarTools Spline Editor 1.0
		spliner[3]=Spliner.getInstance(new int[]{2,6,690,608,860,580,973,420,965,160,420,965,-50,880,291,655,160,291,655,549,473,683,604,110,683,604,1050,933,800,944,160,800,944,-18,1020,656,728,110,656,728,1154,515,730,932});//generated by LunarTools Spline Editor 1.0

		Image imageAbysslogo=LunarEngineTools.createImage(jFrame,"data/abyss_704x640.png");
		logoWidth=imageAbysslogo.getWidth(null);
		logoHeight=imageAbysslogo.getHeight(null);
		bufferedImageAbysslogo=new BufferedImage(logoWidth,logoHeight,BufferedImage.TYPE_INT_RGB);
		dataAbysslogo=((DataBufferInt)bufferedImageAbysslogo.getRaster().getDataBuffer()).getData();
		bufferedImageAbysslogo.getGraphics().drawImage(imageAbysslogo,0,0,jFrame);
		imageAbysslogo=null;
		bufferedImageAbysslogo=null;
		
		renderLogoDeltaX=(logoWidth << SHIFT)/renderLogoStepsX;
		renderLogoDeltaY=(logoHeight << SHIFT)/renderLogoStepsY;

		int factor=0;
		int pixel=0;
		int red=0;
		int green=0;
		int blue=0;
		dataAbysslogoShaded=new int[LOGOSHADECOUNT][];
		for(int i=0;i<LOGOSHADECOUNT-1;i++) {
			factor=256*i/LOGOSHADECOUNT;
			dataAbysslogoShaded[i]=new int[dataAbysslogo.length];
			for(int y=0;y<logoHeight;y++) {
				for(int x=0;x<logoWidth;x++) {
					pixel=dataAbysslogo[x+y*logoWidth];
					red=pixel & 0xff0000;
					green=pixel & 0x00ff00;
					blue=pixel & 0x0000ff;

					red=((red*factor)>>8)& 0xff0000;
					green=((green*factor)>>8)& 0x00ff00;
					blue=((blue*factor)>>8)& 0x0000ff;

					pixel=red | green | blue;
					dataAbysslogoShaded[i][x+y*logoWidth]=pixel;
				}
			}
			dataAbysslogoShaded[LOGOSHADECOUNT-1]=new int[dataAbysslogo.length];
			for(int y=0;y<logoHeight;y++) {
				for(int x=0;x<logoWidth;x++) {
					dataAbysslogoShaded[LOGOSHADECOUNT-1][x+y*logoWidth]=dataAbysslogo[x+y*logoWidth];
				}
			}
		}
		Arrays.fill(dataAbysslogo,0);

		int cornerX=-(logoWidth>>1);
		int cornerY=-(logoHeight>>1);
		int[] point0=new int[] {cornerX << SHIFT,					cornerY << SHIFT,					200 << SHIFT};
		int[] point1=new int[] {(cornerX+logoWidth) << SHIFT,		cornerY << SHIFT,					-200 << SHIFT};
		int[] point2=new int[] {(cornerX+logoWidth) << SHIFT,		(cornerY+logoHeight) << SHIFT,		200 << SHIFT};
		int[] point3=new int[] {cornerX << SHIFT,					(cornerY+logoHeight) << SHIFT,		-200 << SHIFT};
		quadLogo=new Quad(point0,point1,point2,point3);
	}

	@Override
	public void initialize() {
		enableSpliner=false;
		logoFadeSleep=30;
		logoFadeDirection=1;
		quadLogo.turnAlpha=0;
		quadLogo.turnBeta=0;
		quadLogo.turnGamma=0;
		quadLogo.focus1=3000;
		quadLogo.focus2=3100;
	}

	@Override
	public void vbi(){
		if(--logoFadePoint<0) {
			logoFadePoint=logoFadeSleep;
			logoFadeDelta+=logoFadeDirection;
		}

		quadLogo.rotateVBI();

		if(logoFadeout) {
			if(quadLogo.focus2<100000) {
				quadLogo.focus2+=quadLogo.focus2/300;
			}
		}

		if(enableSpliner) {
			for(int i=0;i<4;i++) {
				spliner[i+splineIndexOffset].move(1);
			}
		}

		//		if(SinatraController.devSinarta1!=null) {
		//			if(SinatraController.devSinarta1[0]!=null) {
		//				sinatraX1=SinatraController.devSinarta1[0];
		//			}
		//			if(SinatraController.devSinarta1[1]!=null) {
		//				sinatraY1=SinatraController.devSinarta1[1];
		//			}
		//		}

		//		if(SplineController.devSpliner!=null) {
		//			for(int i=0;i<4;i++) {
		//				if(SplineController.devSpliner[i]!=null) {
		//					spliner[i]=SplineController.devSpliner[i];
		//				}
		//			}
		//		}

		sinatraY1.move(1);
		sinatraY2.move(1);
		sinatraX1.move(1);
		sinatraX2.move(1);

		if(enableBackgroundFader) {
			faderBackground.fade(1);
		}

	}

	@Override
	public void worker2(){
		quadLogo.rotateCALC();

		sinatraY1.beginRender();
		sinatraY2.beginRender();
		sinatraX1.beginRender();
		sinatraX2.beginRender();

		for(int i=0;i<4;i++) {
			spliner[i+splineIndexOffset].beginRender();
			point2D=spliner[i+splineIndexOffset].getNextValue(1);
			quadLogo.vo[i][0]=(point2D.x-Screen.screenCenterX) << SHIFT;
			quadLogo.vo[i][1]=(point2D.y-Screen.screenCenterY) << SHIFT;
		}

		int sinIndexY=sinatraY1.getNextValue(0)+8;
		sinIndexY+=sinatraY2.getNextValue(0)+8;
		sinIndexY>>=1;
		sinatraX1.setDeltaIndex(sinatraX1.getIndex());

		int i;
		int sinwaveIndex1;
		int sinwaveIndex2;
		int index;
		for(int y1=0;y1<640;y1+=32) {
			sinwaveIndex1=sinatraX1.getDeltaIndex();
			sinwaveIndex2=sinatraX2.getDeltaIndex();
			for(int x1=0;x1<704;x1+=32) {
				bobDataFrame=bobData[sinIndexY+sinatraX1.getNextDeltaValue(3)+8];
				for(int y2=0;y2<32;y2++) {
					for(int x2=0;x2<32;x2++) {
						i=x1+x2+(y2+y1)*logoWidth;
						index=(bobDataFrame[x2+y2*bobFade.bobSizeX] & 0xff)+logoFadeDelta;
						if(index<0) {
							index=0;
						}else if(index>=LOGOSHADECOUNT) {
							index=LOGOSHADECOUNT-1;
						}
						dataAbysslogo[i]=dataAbysslogoShaded[index][i];
					}
				}
			}
			sinatraX1.setDeltaIndex(sinwaveIndex1);
			sinatraX2.setDeltaIndex(sinwaveIndex2);
			sinIndexY=sinatraY1.getNextDeltaValue(2)+8;
			sinIndexY+=sinatraY2.getNextDeltaValue(2)+8;
			sinIndexY>>=1;
		}
	}

	private void drawLogo() {
		int x0=quadLogo.to[0][0] << SHIFT;
		int delta0x=(quadLogo.to[3][0]-quadLogo.to[0][0]) << SHIFT;
		int step0x=delta0x/renderLogoStepsX;
		int y0=quadLogo.to[0][1] << SHIFT;
		int delta0y=(quadLogo.to[3][1]-quadLogo.to[0][1]) << SHIFT;
		int step0y=delta0y/renderLogoStepsY;

		int x1=quadLogo.to[1][0] << SHIFT;
		int delta1x=(quadLogo.to[2][0]-quadLogo.to[1][0]) << SHIFT;
		int step1x=delta1x/renderLogoStepsX;
		int y1=quadLogo.to[1][1] << SHIFT;
		int delta1y=(quadLogo.to[2][1]-quadLogo.to[1][1]) << SHIFT;
		int step1y=delta1y/renderLogoStepsY;

		int steplx;
		int steply;
		int lx;
		int ly;
		final int pixelCountX=renderLogoStepsX*renderLogoDeltaX;
		for(int posPicY=0;posPicY<renderLogoStepsY*renderLogoDeltaY;posPicY+=renderLogoDeltaY) {
			x0+=step0x;
			lx=x0;
			x1+=step1x;
			steplx=(x1-x0)/renderLogoStepsX;

			y0+=step0y;
			ly=y0;
			y1+=step1y;
			steply=(y1-y0)/renderLogoStepsY;

			for(int posPicX=0;posPicX<pixelCountX;posPicX+=renderLogoDeltaX,lx+=steplx,ly+=steply) {
				LunarEngine.screendataToWork2[Screen.screenCenterXY+(lx >> SHIFT)+(ly >> SHIFT)*Screen.screenSizeX]=dataAbysslogo[(posPicX >> SHIFT)+(posPicY >> SHIFT)*logoWidth];
			}
		}
	}

	@Override
	public void worker3(){
		Screen.screenClear(LunarEngine.screendataToReset,faderBackground.getCurrentColor());
		drawLogo();
	}

	@Override
	public void rotateBuffers() {
		rotateBuffers5();
	}

}
